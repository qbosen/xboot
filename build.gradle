buildscript {
    repositories {
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:$spotbugsVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springbootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyMgrVersion"
        classpath "org.owasp:dependency-check-gradle:$dependencyCheckVersion"
    }
}
allprojects {
    apply plugin: 'idea'
}


static String loadMavenUrl(Project pj, String prop) {
    def url = pj.findProperty(prop) as String
    return url == null || url.trim().length() == 0 ? null : url.trim()
}

subprojects {
    apply plugin: 'java-library'

    repositories {
        def localMavenPublicRU = loadMavenUrl(project, "localMavenPublicRU")

        if (localMavenPublicRU != null) {
            maven {
                url localMavenPublicRU
                allowInsecureProtocol true
            }
        }
        maven { url "https://maven.aliyun.com/repository/public" }
        mavenCentral()
    }
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    configurations.all {
        exclude group: "junit", module: "junit"
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
    afterEvaluate {
        def localMavenReleaseRU = loadMavenUrl(project, "localMavenReleaseRU")
        def localMavenSnapshotRU = loadMavenUrl(project, "localMavenSnapshotRU")

        if (plugins.hasPlugin("maven-publish") && localMavenReleaseRU != null && localMavenSnapshotRU != null) {
            logger.quiet("配置[$project.name]发布仓库")
            group = rootProject.group
            version = rootProject.version
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        groupId = rootProject.group
                        version = rootProject.version
                        artifactId = project.name
                        from components.java
                    }
                }

                repositories {
                    maven {
                        name 'cust'
                        credentials { username "$mavenUsername"; password "$mavenPassword" }
                        url = version.endsWith('SNAPSHOT') ? localMavenSnapshotRU : localMavenReleaseRU
                        allowInsecureProtocol true
                    }
                }
            }
        }

    }
    test {
        useJUnitPlatform()
    }

    apply from: "$rootDir/gradle/spotbugs/spotbugs.gradle"
    apply from: "$rootDir/gradle/checkstyle/checkstyle.gradle"
    apply from: "$rootDir/gradle/git-hooks/git-hooks.gradle"
    apply from: "$rootDir/gradle/dependency-check/dependency-check.gradle"
    apply from: "$rootDir/gradle/version-info.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
}

